{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"regex","disambiguator":[897616650282213135,8491329166074839660]},"crate_root":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src","external_crates":[{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15457747332785279848,2321850194859987339]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15868474213044323624,2444462643878075336]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8458891086083892067,8748117807113040734]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[767489389527341057,5235531157453730766]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[18110415425518651545,18006836507566872508]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7789913747131704681,15383421434934411168]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13641195905247684855,10390215052031693935]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[6546252056220169788,18379399819183232084]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18001143091758731311,4733760878430807864]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":10,"id":{"name":"aho_corasick","disambiguator":[9614652229152978541,1910757170782788063]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":11,"id":{"name":"memchr","disambiguator":[1922966407542116264,10982176376012973570]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":12,"id":{"name":"libc","disambiguator":[9795921507606627722,5163658886396158850]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":13,"id":{"name":"thread_local","disambiguator":[742887869722723632,16457061494488826588]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":14,"id":{"name":"unreachable","disambiguator":[10120044557901542313,14253108592247652693]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":15,"id":{"name":"void","disambiguator":[5818823682881022901,4190335088847544618]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[15885094394357094236,10120972362620738961]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":17,"id":{"name":"regex_syntax","disambiguator":[4665267890868001893,10019355120551086333]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":18,"id":{"name":"ucd_util","disambiguator":[13502744880586320068,16079670112742148409]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","num":19,"id":{"name":"utf8_ranges","disambiguator":[8781510316182638942,5844516805939472892]}}],"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23067,"line_start":11,"line_end":672,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2200},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18483,"byte_end":18488,"line_start":533,"line_end":533,"column_start":16,"column_end":21},"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18519,"byte_end":18520,"line_start":534,"line_end":534,"column_start":30,"column_end":31},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18555,"byte_end":18556,"line_start":535,"line_end":535,"column_start":34,"column_end":35},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18583,"byte_end":18584,"line_start":536,"line_end":536,"column_start":26,"column_end":27},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18604,"byte_end":18613,"line_start":537,"line_end":537,"column_start":19,"column_end":28},"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3048},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18641,"byte_end":18646,"line_start":539,"line_end":539,"column_start":5,"column_end":10},"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3026},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18648,"byte_end":18653,"line_start":539,"line_end":539,"column_start":12,"column_end":17},"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1790},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18655,"byte_end":18663,"line_start":539,"line_end":539,"column_start":19,"column_end":27},"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1764},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18669,"byte_end":18681,"line_start":540,"line_end":540,"column_start":5,"column_end":17},"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1842},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18683,"byte_end":18690,"line_start":540,"line_end":540,"column_start":19,"column_end":26},"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1834},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18692,"byte_end":18706,"line_start":540,"line_end":540,"column_start":28,"column_end":42},"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1826},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18708,"byte_end":18725,"line_start":540,"line_end":540,"column_start":44,"column_end":61},"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1850},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18731,"byte_end":18739,"line_start":541,"line_end":541,"column_start":5,"column_end":13},"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3054},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18741,"byte_end":18752,"line_start":541,"line_end":541,"column_start":15,"column_end":26},"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1874},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18754,"byte_end":18762,"line_start":541,"line_end":541,"column_start":28,"column_end":36},"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1774},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18764,"byte_end":18769,"line_start":541,"line_end":541,"column_start":38,"column_end":43},"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1782},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18771,"byte_end":18777,"line_start":541,"line_end":541,"column_start":45,"column_end":51},"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1684},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18783,"byte_end":18789,"line_start":542,"line_end":542,"column_start":5,"column_end":11},"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22214,"byte_end":22215,"line_start":632,"line_end":632,"column_start":32,"column_end":33},"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22252,"byte_end":22253,"line_start":633,"line_end":633,"column_start":36,"column_end":37},"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22277,"byte_end":22278,"line_start":634,"line_end":634,"column_start":23,"column_end":24},"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22307,"byte_end":22308,"line_start":635,"line_end":635,"column_start":28,"column_end":29},"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22332,"byte_end":22341,"line_start":636,"line_end":636,"column_start":23,"column_end":32},"name":"Locations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22867,"byte_end":22875,"line_start":667,"line_end":667,"column_start":22,"column_end":30},"name":"Compiler","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22896,"byte_end":22900,"line_start":668,"line_end":668,"column_start":20,"column_end":24},"name":"Exec","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22902,"byte_end":22913,"line_start":668,"line_end":668,"column_start":26,"column_end":37},"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2350},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22936,"byte_end":22940,"line_start":669,"line_end":669,"column_start":21,"column_end":25},"name":"Char","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22942,"byte_end":22947,"line_start":669,"line_end":669,"column_start":27,"column_end":32},"name":"Input","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2326},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22949,"byte_end":22958,"line_start":669,"line_end":669,"column_start":34,"column_end":43},"name":"CharInput","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2314},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22960,"byte_end":22967,"line_start":669,"line_end":669,"column_start":45,"column_end":52},"name":"InputAt","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2428},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22991,"byte_end":23006,"line_start":670,"line_end":670,"column_start":22,"column_end":37},"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2514},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23027,"byte_end":23034,"line_start":671,"line_end":671,"column_start":20,"column_end":27},"name":"Program","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2520},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23036,"byte_end":23040,"line_start":671,"line_end":671,"column_start":29,"column_end":33},"name":"Inst","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2560},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23042,"byte_end":23051,"line_start":671,"line_end":671,"column_start":35,"column_end":44},"name":"EmptyLook","value":"","parent":{"krate":0,"index":1918}},{"kind":"Use","ref_id":{"krate":0,"index":2590},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23053,"byte_end":23063,"line_start":671,"line_end":671,"column_start":46,"column_end":56},"name":"InstRanges","value":"","parent":{"krate":0,"index":1918}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23067,"line_start":11,"line_end":672,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":54},{"krate":0,"index":66},{"krate":0,"index":114},{"krate":0,"index":136},{"krate":0,"index":324},{"krate":0,"index":538},{"krate":0,"index":564},{"krate":0,"index":786},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":986},{"krate":0,"index":1192},{"krate":0,"index":1242},{"krate":0,"index":1320},{"krate":0,"index":1330},{"krate":0,"index":1566},{"krate":0,"index":1570},{"krate":0,"index":1644},{"krate":0,"index":1882},{"krate":0,"index":1918}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18167,"byte_end":18189,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22175,"byte_end":22180,"line_start":631,"line_end":631,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45040,"byte_end":45048,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45459,"byte_end":45462,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46057,"byte_end":46067,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46811,"byte_end":46816,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is resposible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47099,"byte_end":47108,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47591,"byte_end":47594,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47829,"byte_end":47836,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":48190,"byte_end":48197,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":943},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159607,"byte_end":159613,"line_start":20,"line_end":20,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":947},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159733,"byte_end":159747,"line_start":23,"line_end":23,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":951},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160034,"byte_end":160049,"line_start":30,"line_end":30,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2200},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2200},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159571,"byte_end":159576,"line_start":18,"line_end":18,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":947},{"krate":0,"index":951}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":163219,"byte_end":163223,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2212},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":163594,"byte_end":163604,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":955}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":163843,"byte_end":163856,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165564,"byte_end":165575,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166176,"byte_end":166179,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166505,"byte_end":166513,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166813,"byte_end":166824,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167322,"byte_end":167331,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167646,"byte_end":167649,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":168140,"byte_end":168160,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":168728,"byte_end":168733,"line_start":189,"line_end":189,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":169004,"byte_end":169013,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":169136,"byte_end":169143,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":172443,"byte_end":172448,"line_start":282,"line_end":282,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":197875,"byte_end":197890,"line_start":1012,"line_end":1012,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync<'c>>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199635,"byte_end":199651,"line_start":1066,"line_end":1066,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199780,"byte_end":199796,"line_start":1072,"line_end":1072,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199995,"byte_end":200003,"line_start":1080,"line_end":1080,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199937,"byte_end":199954,"line_start":1079,"line_end":1079,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200394,"byte_end":200406,"line_start":1090,"line_end":1090,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200336,"byte_end":200353,"line_start":1089,"line_end":1089,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200532,"byte_end":200542,"line_start":1095,"line_end":1095,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200673,"byte_end":200687,"line_start":1100,"line_end":1100,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200862,"byte_end":200877,"line_start":1105,"line_end":1105,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201035,"byte_end":201054,"line_start":1110,"line_end":1110,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201241,"byte_end":201254,"line_start":1116,"line_end":1116,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201411,"byte_end":201424,"line_start":1123,"line_end":1123,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201599,"byte_end":201615,"line_start":1129,"line_end":1129,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2314},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221030,"byte_end":221037,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221019,"byte_end":221108,"line_start":25,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221209,"byte_end":221217,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221344,"byte_end":221350,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221596,"byte_end":221600,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221694,"byte_end":221698,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221825,"byte_end":221828,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221973,"byte_end":221981,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222089,"byte_end":222092,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222213,"byte_end":222221,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222347,"byte_end":222352,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222425,"byte_end":222427,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222604,"byte_end":222613,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222794,"byte_end":222807,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222947,"byte_end":222961,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223068,"byte_end":223077,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223227,"byte_end":223230,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223292,"byte_end":223300,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223399,"byte_end":223407,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2326},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224151,"byte_end":224160,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224140,"byte_end":224175,"line_start":140,"line_end":140,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224279,"byte_end":224282,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput<'t>>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2350},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230224,"byte_end":230228,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230213,"byte_end":230234,"line_start":346,"line_end":346,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230213,"byte_end":230234,"line_start":346,"line_end":346,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230552,"byte_end":230559,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230531,"byte_end":230540,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230751,"byte_end":230759,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230730,"byte_end":230739,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230982,"byte_end":230994,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231214,"byte_end":231226,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2428},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":233253,"byte_end":233268,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1111}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234209,"byte_end":234214,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234365,"byte_end":234373,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234566,"byte_end":234574,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235435,"byte_end":235443,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235639,"byte_end":235643,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235581,"byte_end":235598,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236337,"byte_end":236347,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236735,"byte_end":236743,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237168,"byte_end":237172,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237894,"byte_end":237897,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238032,"byte_end":238035,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238144,"byte_end":238152,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238268,"byte_end":238271,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238708,"byte_end":238724,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241996,"byte_end":242001,"line_start":266,"line_end":266,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":251},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242007,"byte_end":242012,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242028,"byte_end":242034,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242050,"byte_end":242052,"line_start":269,"line_end":269,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":263},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242073,"byte_end":242083,"line_start":270,"line_end":270,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":267},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242104,"byte_end":242113,"line_start":271,"line_end":271,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":1116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1116},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241974,"byte_end":241985,"line_start":265,"line_end":265,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":267}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2458},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":246713,"byte_end":246724,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1155},{"krate":0,"index":1157}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":249167,"byte_end":249171,"line_start":496,"line_end":496,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":249109,"byte_end":249126,"line_start":495,"line_end":495,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":249999,"byte_end":250008,"line_start":522,"line_end":522,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":249941,"byte_end":249958,"line_start":521,"line_end":521,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":250183,"byte_end":250186,"line_start":529,"line_end":529,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":250246,"byte_end":250254,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2514},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":287393,"byte_end":287400,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1213},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1205},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":287470,"byte_end":287475,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1207},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":287640,"byte_end":287647,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1209},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":287781,"byte_end":287789,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1211},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":287882,"byte_end":287898,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1213},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288255,"byte_end":288260,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1215},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288374,"byte_end":288386,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1217},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288465,"byte_end":288474,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1219},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288598,"byte_end":288606,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1221},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288795,"byte_end":288801,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1223},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288907,"byte_end":288917,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1225},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":288999,"byte_end":289016,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1227},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":289094,"byte_end":289109,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1229},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":289200,"byte_end":289225,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1231},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":289317,"byte_end":289325,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1233},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":290152,"byte_end":290166,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":290292,"byte_end":290295,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":291010,"byte_end":291014,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":291328,"byte_end":291342,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":291868,"byte_end":291881,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":292088,"byte_end":292098,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":292333,"byte_end":292342,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":292490,"byte_end":292506,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":297341,"byte_end":297346,"line_start":269,"line_end":269,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":297476,"byte_end":297480,"line_start":272,"line_end":272,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":297615,"byte_end":297620,"line_start":275,"line_end":275,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":297780,"byte_end":297789,"line_start":278,"line_end":278,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":297931,"byte_end":297935,"line_start":281,"line_end":281,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298109,"byte_end":298115,"line_start":284,"line_end":284,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298313,"byte_end":298318,"line_start":288,"line_end":288,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2520},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2520},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":296912,"byte_end":296916,"line_start":261,"line_end":261,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1243},{"krate":0,"index":1247},{"krate":0,"index":1251},{"krate":0,"index":1255},{"krate":0,"index":1259}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298422,"byte_end":298430,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2530},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298628,"byte_end":298636,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1265}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1263},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298700,"byte_end":298704,"line_start":305,"line_end":305,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2530},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1265},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298859,"byte_end":298863,"line_start":308,"line_end":308,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2530},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2540},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298955,"byte_end":298964,"line_start":313,"line_end":313,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1269}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1267},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299120,"byte_end":299125,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1269},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299290,"byte_end":299295,"line_start":319,"line_end":319,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2550},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299395,"byte_end":299408,"line_start":324,"line_end":324,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1273}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1271},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299509,"byte_end":299513,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1273},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299583,"byte_end":299587,"line_start":329,"line_end":329,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299751,"byte_end":299760,"line_start":336,"line_end":336,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299796,"byte_end":299803,"line_start":338,"line_end":338,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299833,"byte_end":299842,"line_start":340,"line_end":340,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299870,"byte_end":299877,"line_start":342,"line_end":342,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299951,"byte_end":299963,"line_start":344,"line_end":344,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300043,"byte_end":300058,"line_start":346,"line_end":346,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300093,"byte_end":300110,"line_start":348,"line_end":348,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300149,"byte_end":300169,"line_start":350,"line_end":350,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2560},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299703,"byte_end":299712,"line_start":334,"line_end":334,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299694,"byte_end":300172,"line_start":334,"line_end":351,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":299694,"byte_end":300172,"line_start":334,"line_end":351,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2580},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300253,"byte_end":300261,"line_start":355,"line_end":355,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":1291},{"krate":0,"index":1293}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1291},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300362,"byte_end":300366,"line_start":358,"line_end":358,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1293},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300416,"byte_end":300417,"line_start":360,"line_end":360,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2590},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300509,"byte_end":300519,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1297}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1295},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300620,"byte_end":300624,"line_start":368,"line_end":368,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2590},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1297},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300699,"byte_end":300705,"line_start":370,"line_end":370,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2590},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300832,"byte_end":300839,"line_start":375,"line_end":375,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":301625,"byte_end":301634,"line_start":400,"line_end":400,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2600},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":301889,"byte_end":301898,"line_start":410,"line_end":410,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1299},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":301999,"byte_end":302003,"line_start":413,"line_end":413,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2600},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1301},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":302072,"byte_end":302077,"line_start":415,"line_end":415,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2600},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1303},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":302139,"byte_end":302142,"line_start":417,"line_end":417,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2600},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":302248,"byte_end":302255,"line_start":422,"line_end":422,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2610},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":302946,"byte_end":302958,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode }","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1323}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":302912,"byte_end":302934,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1305},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":302969,"byte_end":302973,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1307},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":302996,"byte_end":303006,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1309},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303023,"byte_end":303037,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1311},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303054,"byte_end":303064,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1313},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303079,"byte_end":303095,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1315},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303111,"byte_end":303121,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1317},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303137,"byte_end":303157,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1319},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303173,"byte_end":303183,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1321},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303199,"byte_end":303216,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1323},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303232,"byte_end":303239,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2764},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316460,"byte_end":316465,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316449,"byte_end":316527,"line_start":30,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316449,"byte_end":316527,"line_start":30,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316646,"byte_end":316651,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316625,"byte_end":316634,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316790,"byte_end":316793,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316769,"byte_end":316778,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316895,"byte_end":316903,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match<'t>>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316874,"byte_end":316883,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2786},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":317917,"byte_end":317922,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318981,"byte_end":318984,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":319715,"byte_end":319723,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":320585,"byte_end":320589,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":321305,"byte_end":321314,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":324321,"byte_end":324329,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":325759,"byte_end":325772,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":326690,"byte_end":326695,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":327711,"byte_end":327717,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":332500,"byte_end":332507,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":332964,"byte_end":332975,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":333444,"byte_end":333452,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":335927,"byte_end":335941,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":336348,"byte_end":336365,"line_start":572,"line_end":572,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":336828,"byte_end":336839,"line_start":587,"line_end":587,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":337255,"byte_end":337262,"line_start":598,"line_end":598,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":337818,"byte_end":337834,"line_start":614,"line_end":614,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut Locations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338179,"byte_end":338185,"line_start":628,"line_end":628,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338308,"byte_end":338321,"line_start":633,"line_end":633,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338457,"byte_end":338469,"line_start":638,"line_end":638,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338669,"byte_end":338678,"line_start":645,"line_end":645,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> Locations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of locations that can be reused in multiple calls\n to `read_captures`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1442},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339143,"byte_end":339150,"line_start":658,"line_end":658,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339723,"byte_end":339737,"line_start":676,"line_end":676,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":340318,"byte_end":340323,"line_start":694,"line_end":694,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":373}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":341306,"byte_end":341312,"line_start":729,"line_end":729,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":385}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1474},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":342007,"byte_end":342019,"line_start":757,"line_end":757,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":342943,"byte_end":342951,"line_start":783,"line_end":783,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":343876,"byte_end":343879,"line_start":809,"line_end":809,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":344164,"byte_end":344168,"line_start":815,"line_end":815,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":344600,"byte_end":344604,"line_start":824,"line_end":824,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":345648,"byte_end":345654,"line_start":847,"line_end":847,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":345965,"byte_end":345968,"line_start":856,"line_end":856,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":345944,"byte_end":345953,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1526},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":349098,"byte_end":349115,"line_start":953,"line_end":953,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":459}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1534},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":349748,"byte_end":349756,"line_start":973,"line_end":973,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":350042,"byte_end":350056,"line_start":981,"line_end":981,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1534},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":350467,"byte_end":350479,"line_start":990,"line_end":990,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1534},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":351210,"byte_end":351216,"line_start":1015,"line_end":1015,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1534},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2792},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":351444,"byte_end":351455,"line_start":1024,"line_end":1024,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":352719,"byte_end":352727,"line_start":1062,"line_end":1062,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":368373,"byte_end":368382,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":368711,"byte_end":368714,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":369158,"byte_end":369162,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":369457,"byte_end":369460,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1586},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":369936,"byte_end":369954,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":501}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1596},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":371227,"byte_end":371231,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1594},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1684},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377165,"byte_end":377171,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3026},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377422,"byte_end":377427,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1445},{"krate":0,"index":1447}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377411,"byte_end":377488,"line_start":39,"line_end":43,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377411,"byte_end":377488,"line_start":39,"line_end":43,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377607,"byte_end":377612,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377586,"byte_end":377595,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377751,"byte_end":377754,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377730,"byte_end":377739,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377856,"byte_end":377862,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match<'t>>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377835,"byte_end":377844,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3048},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380567,"byte_end":380572,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":381514,"byte_end":381517,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":382247,"byte_end":382255,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":383131,"byte_end":383135,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":383849,"byte_end":383858,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":386894,"byte_end":386902,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":388220,"byte_end":388233,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":389092,"byte_end":389097,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":390085,"byte_end":390091,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":394628,"byte_end":394635,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":395092,"byte_end":395103,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":395572,"byte_end":395580,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":398536,"byte_end":398550,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":398956,"byte_end":398973,"line_start":628,"line_end":628,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":399439,"byte_end":399450,"line_start":643,"line_end":643,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":399865,"byte_end":399872,"line_start":654,"line_end":654,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":400442,"byte_end":400458,"line_start":671,"line_end":671,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut Locations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":400832,"byte_end":400838,"line_start":687,"line_end":687,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":400961,"byte_end":400974,"line_start":692,"line_end":692,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":401110,"byte_end":401122,"line_start":697,"line_end":697,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":401322,"byte_end":401331,"line_start":704,"line_end":704,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> Locations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of locations that can be reused in multiple calls\n to `read_captures`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1764},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":401662,"byte_end":401674,"line_start":715,"line_end":715,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1774},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":402263,"byte_end":402268,"line_start":736,"line_end":736,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":603}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1782},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":403244,"byte_end":403250,"line_start":771,"line_end":771,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":615}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1790},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":404235,"byte_end":404243,"line_start":804,"line_end":804,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":405131,"byte_end":405134,"line_start":830,"line_end":830,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":405419,"byte_end":405423,"line_start":836,"line_end":836,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":405855,"byte_end":405859,"line_start":845,"line_end":845,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":406903,"byte_end":406909,"line_start":868,"line_end":868,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407216,"byte_end":407219,"line_start":877,"line_end":877,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407195,"byte_end":407204,"line_start":876,"line_end":876,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1826},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":409897,"byte_end":409914,"line_start":959,"line_end":959,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":677}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1834},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":410541,"byte_end":410555,"line_start":980,"line_end":980,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1842},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":411240,"byte_end":411247,"line_start":1001,"line_end":1001,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1850},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":411813,"byte_end":411821,"line_start":1017,"line_end":1017,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":412128,"byte_end":412142,"line_start":1025,"line_end":1025,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":412547,"byte_end":412559,"line_start":1034,"line_end":1034,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":413280,"byte_end":413286,"line_start":1059,"line_end":1059,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3054},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":413514,"byte_end":413525,"line_start":1068,"line_end":1068,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1874},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":414762,"byte_end":414770,"line_start":1106,"line_end":1106,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3060},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":415649,"byte_end":415658,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416132,"byte_end":416135,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416302,"byte_end":416305,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416360,"byte_end":416368,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416427,"byte_end":416435,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416497,"byte_end":416503,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416663,"byte_end":416671,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416805,"byte_end":416810,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1918},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22835,"byte_end":22843,"line_start":666,"line_end":666,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1928},{"krate":0,"index":1938},{"krate":0,"index":1940}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":25802,"byte_end":25807,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26469,"byte_end":26476,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45301,"byte_end":45309,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":73162,"byte_end":73171,"line_start":778,"line_end":778,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":75348,"byte_end":75356,"line_start":841,"line_end":841,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":76289,"byte_end":76301,"line_start":874,"line_end":874,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":81181,"byte_end":81192,"line_start":1006,"line_end":1006,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":82391,"byte_end":82403,"line_start":1047,"line_end":1047,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95392,"byte_end":95398,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":97693,"byte_end":97701,"line_start":295,"line_end":295,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":98123,"byte_end":98128,"line_start":312,"line_end":312,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102359,"byte_end":102364,"line_start":423,"line_end":423,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":103153,"byte_end":103163,"line_start":447,"line_end":447,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":103467,"byte_end":103470,"line_start":457,"line_end":457,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":150834,"byte_end":150845,"line_start":1601,"line_end":1601,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152706,"byte_end":152716,"line_start":1658,"line_end":1658,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153152,"byte_end":153156,"line_start":1684,"line_end":1684,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153732,"byte_end":153737,"line_start":1709,"line_end":1709,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154008,"byte_end":154019,"line_start":1719,"line_end":1719,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154441,"byte_end":154455,"line_start":1733,"line_end":1733,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154961,"byte_end":154971,"line_start":1751,"line_end":1751,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160083,"byte_end":160088,"line_start":33,"line_end":33,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160429,"byte_end":160434,"line_start":47,"line_end":47,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":161083,"byte_end":161088,"line_start":64,"line_end":64,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":161867,"byte_end":161872,"line_start":88,"line_end":88,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165882,"byte_end":165893,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":174683,"byte_end":174696,"line_start":339,"line_end":339,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":175734,"byte_end":175744,"line_start":374,"line_end":374,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":184931,"byte_end":184941,"line_start":607,"line_end":607,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":692},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":708},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199749,"byte_end":199762,"line_start":1071,"line_end":1071,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199886,"byte_end":199890,"line_start":1077,"line_end":1077,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201719,"byte_end":201723,"line_start":1134,"line_end":1134,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201873,"byte_end":201885,"line_start":1143,"line_end":1143,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":207235,"byte_end":207252,"line_start":1284,"line_end":1284,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":212389,"byte_end":212392,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":212488,"byte_end":212491,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221115,"byte_end":221122,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224186,"byte_end":224195,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224369,"byte_end":224378,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224484,"byte_end":224493,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226612,"byte_end":226621,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226883,"byte_end":226892,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227001,"byte_end":227010,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230256,"byte_end":230260,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230470,"byte_end":230474,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231429,"byte_end":231433,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231515,"byte_end":231519,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231642,"byte_end":231646,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231875,"byte_end":231879,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,102,97,108,108,98,97,99,107,46,114,115],"byte_start":272675,"byte_end":272680,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,102,97,108,108,98,97,99,107,46,114,115],"byte_start":273510,"byte_end":273515,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234105,"byte_end":234120,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":239199,"byte_end":239206,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242155,"byte_end":242166,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":243881,"byte_end":243894,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247801,"byte_end":247812,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253119,"byte_end":253135,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":276934,"byte_end":276939,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":277233,"byte_end":277236,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1228},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":286360,"byte_end":286367,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":290183,"byte_end":290190,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":293144,"byte_end":293151,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":293270,"byte_end":293277,"line_start":169,"line_end":169,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298339,"byte_end":298343,"line_start":291,"line_end":291,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300734,"byte_end":300744,"line_start":373,"line_end":373,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":302156,"byte_end":302165,"line_start":420,"line_end":420,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303267,"byte_end":303279,"line_start":27,"line_end":27,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316538,"byte_end":316543,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":317953,"byte_end":317958,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318135,"byte_end":318140,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318445,"byte_end":318450,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318534,"byte_end":318539,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318750,"byte_end":318755,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":335126,"byte_end":335131,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338109,"byte_end":338114,"line_start":626,"line_end":626,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339226,"byte_end":339233,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1446},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339820,"byte_end":339834,"line_start":678,"line_end":678,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":340409,"byte_end":340414,"line_start":699,"line_end":699,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1462},{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":341393,"byte_end":341399,"line_start":734,"line_end":734,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":342088,"byte_end":342100,"line_start":759,"line_end":759,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":343058,"byte_end":343066,"line_start":789,"line_end":789,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":346044,"byte_end":346052,"line_start":861,"line_end":861,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":346279,"byte_end":346292,"line_start":869,"line_end":869,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":347783,"byte_end":347791,"line_start":914,"line_end":914,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1516},{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":348427,"byte_end":348435,"line_start":935,"line_end":935,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":349219,"byte_end":349236,"line_start":958,"line_end":958,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":351538,"byte_end":351549,"line_start":1026,"line_end":1026,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":352132,"byte_end":352133,"line_start":1048,"line_end":1048,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":352770,"byte_end":352778,"line_start":1064,"line_end":1064,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":368401,"byte_end":368410,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":370027,"byte_end":370045,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":373536,"byte_end":373543,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":373818,"byte_end":373825,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":375047,"byte_end":375061,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":375346,"byte_end":375360,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377499,"byte_end":377504,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380603,"byte_end":380608,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380785,"byte_end":380790,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380978,"byte_end":380983,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1710}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":381067,"byte_end":381072,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":381283,"byte_end":381288,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":397743,"byte_end":397748,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":400762,"byte_end":400767,"line_start":685,"line_end":685,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":401743,"byte_end":401755,"line_start":717,"line_end":717,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":402354,"byte_end":402359,"line_start":741,"line_end":741,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":403331,"byte_end":403337,"line_start":776,"line_end":776,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":404349,"byte_end":404357,"line_start":810,"line_end":810,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407295,"byte_end":407303,"line_start":882,"line_end":882,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407530,"byte_end":407543,"line_start":890,"line_end":890,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":408590,"byte_end":408598,"line_start":920,"line_end":920,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":409230,"byte_end":409238,"line_start":941,"line_end":941,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":410018,"byte_end":410035,"line_start":964,"line_end":964,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1830},{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":410641,"byte_end":410655,"line_start":982,"line_end":982,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1838},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":411326,"byte_end":411333,"line_start":1003,"line_end":1003,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":413608,"byte_end":413619,"line_start":1070,"line_end":1070,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":414196,"byte_end":414197,"line_start":1092,"line_end":1092,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":414812,"byte_end":414820,"line_start":1108,"line_end":1108,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416109,"byte_end":416118,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416871,"byte_end":416880,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":25802,"byte_end":25807,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26469,"byte_end":26476,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45301,"byte_end":45309,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":73162,"byte_end":73171,"line_start":778,"line_end":778,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":75348,"byte_end":75356,"line_start":841,"line_end":841,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":76289,"byte_end":76301,"line_start":874,"line_end":874,"column_start":14,"column_end":26},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":81181,"byte_end":81192,"line_start":1006,"line_end":1006,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":82391,"byte_end":82403,"line_start":1047,"line_end":1047,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95392,"byte_end":95398,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":2102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":97693,"byte_end":97701,"line_start":295,"line_end":295,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":360},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":98123,"byte_end":98128,"line_start":312,"line_end":312,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":2112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102359,"byte_end":102364,"line_start":423,"line_end":423,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":2070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":103153,"byte_end":103163,"line_start":447,"line_end":447,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":2080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":103467,"byte_end":103470,"line_start":457,"line_end":457,"column_start":10,"column_end":13},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":2096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":150834,"byte_end":150845,"line_start":1601,"line_end":1601,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152706,"byte_end":152716,"line_start":1658,"line_end":1658,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":2174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153152,"byte_end":153156,"line_start":1684,"line_end":1684,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":2132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153732,"byte_end":153737,"line_start":1709,"line_end":1709,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":2112},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154008,"byte_end":154019,"line_start":1719,"line_end":1719,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":2090},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154441,"byte_end":154455,"line_start":1733,"line_end":1733,"column_start":25,"column_end":39},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":512},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154961,"byte_end":154971,"line_start":1751,"line_end":1751,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":2174},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160083,"byte_end":160088,"line_start":33,"line_end":33,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":2200},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160429,"byte_end":160434,"line_start":47,"line_end":47,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":161083,"byte_end":161088,"line_start":64,"line_end":64,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":161867,"byte_end":161872,"line_start":88,"line_end":88,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165882,"byte_end":165893,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":174683,"byte_end":174696,"line_start":339,"line_end":339,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":624},"to":{"krate":0,"index":1594}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":175734,"byte_end":175744,"line_start":374,"line_end":374,"column_start":32,"column_end":42},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":2212},"to":{"krate":0,"index":1594}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":184931,"byte_end":184941,"line_start":607,"line_end":607,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":2212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199749,"byte_end":199762,"line_start":1071,"line_end":1071,"column_start":10,"column_end":23},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199886,"byte_end":199890,"line_start":1077,"line_end":1077,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201719,"byte_end":201723,"line_start":1134,"line_end":1134,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":622},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201873,"byte_end":201885,"line_start":1143,"line_end":1143,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":2218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":207235,"byte_end":207252,"line_start":1284,"line_end":1284,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":2260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":212389,"byte_end":212392,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":2292},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":212488,"byte_end":212491,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":2292},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221115,"byte_end":221122,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":2314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224186,"byte_end":224195,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":2326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224369,"byte_end":224378,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":2012}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224484,"byte_end":224493,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":2326},"to":{"krate":0,"index":858}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226612,"byte_end":226621,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":2338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226883,"byte_end":226892,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":2338},"to":{"krate":2,"index":2012}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227001,"byte_end":227010,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":2338},"to":{"krate":0,"index":858}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230256,"byte_end":230260,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230470,"byte_end":230474,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231429,"byte_end":231433,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231515,"byte_end":231519,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231642,"byte_end":231646,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":231875,"byte_end":231879,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":2350},"to":{"krate":2,"index":2472}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,102,97,108,108,98,97,99,107,46,114,115],"byte_start":272675,"byte_end":272680,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":2388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,102,97,108,108,98,97,99,107,46,114,115],"byte_start":273510,"byte_end":273515,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":2408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234105,"byte_end":234120,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":2428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":239199,"byte_end":239206,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":2438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242155,"byte_end":242166,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1116},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":243881,"byte_end":243894,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":2448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247801,"byte_end":247812,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":2458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253119,"byte_end":253135,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":2468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":276934,"byte_end":276939,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":2484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":277233,"byte_end":277236,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":2478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":286360,"byte_end":286367,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":2494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":290183,"byte_end":290190,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":2514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":293144,"byte_end":293151,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":2514},"to":{"krate":2,"index":2012}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":293270,"byte_end":293277,"line_start":169,"line_end":169,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":2514},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":298339,"byte_end":298343,"line_start":291,"line_end":291,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":2520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":300734,"byte_end":300744,"line_start":373,"line_end":373,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":2590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":302156,"byte_end":302165,"line_start":420,"line_end":420,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":2600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":303267,"byte_end":303279,"line_start":27,"line_end":27,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":2610},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":316538,"byte_end":316543,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":2764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":317953,"byte_end":317958,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":2786},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318135,"byte_end":318140,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":2786},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318445,"byte_end":318450,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":2786},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318534,"byte_end":318539,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":2786},"to":{"krate":2,"index":6602}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":318750,"byte_end":318755,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":2786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":335126,"byte_end":335131,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":2786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":338109,"byte_end":338114,"line_start":626,"line_end":626,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":2786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339226,"byte_end":339233,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1442},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":339820,"byte_end":339834,"line_start":678,"line_end":678,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":340409,"byte_end":340414,"line_start":699,"line_end":699,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1458},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":341393,"byte_end":341399,"line_start":734,"line_end":734,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":342088,"byte_end":342100,"line_start":759,"line_end":759,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":343058,"byte_end":343066,"line_start":789,"line_end":789,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":346044,"byte_end":346052,"line_start":861,"line_end":861,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":346279,"byte_end":346292,"line_start":869,"line_end":869,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1502},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":347783,"byte_end":347791,"line_start":914,"line_end":914,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":348427,"byte_end":348435,"line_start":935,"line_end":935,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":349219,"byte_end":349236,"line_start":958,"line_end":958,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1526},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":351538,"byte_end":351549,"line_start":1026,"line_end":1026,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":2792},"to":{"krate":0,"index":1534}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":352132,"byte_end":352133,"line_start":1048,"line_end":1048,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":485},"to":{"krate":0,"index":1534}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":352770,"byte_end":352778,"line_start":1064,"line_end":1064,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1558},"to":{"krate":0,"index":1534}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":368401,"byte_end":368410,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":370027,"byte_end":370045,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1586},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":371176,"byte_end":371181,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":1594}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":373536,"byte_end":373543,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":373818,"byte_end":373825,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1616},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":375047,"byte_end":375061,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":375346,"byte_end":375360,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1630},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":377499,"byte_end":377504,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":3026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380603,"byte_end":380608,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380785,"byte_end":380790,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":380978,"byte_end":380983,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":381067,"byte_end":381072,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":3048},"to":{"krate":2,"index":6602}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":381283,"byte_end":381288,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":3048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":397743,"byte_end":397748,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":3048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":400762,"byte_end":400767,"line_start":685,"line_end":685,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":3048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":401743,"byte_end":401755,"line_start":717,"line_end":717,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1764},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":402354,"byte_end":402359,"line_start":741,"line_end":741,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1774},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":403331,"byte_end":403337,"line_start":776,"line_end":776,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":404349,"byte_end":404357,"line_start":810,"line_end":810,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407295,"byte_end":407303,"line_start":882,"line_end":882,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1790},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":407530,"byte_end":407543,"line_start":890,"line_end":890,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1808},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":408590,"byte_end":408598,"line_start":920,"line_end":920,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1790},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":409230,"byte_end":409238,"line_start":941,"line_end":941,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1790},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":410018,"byte_end":410035,"line_start":964,"line_end":964,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1826},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":410641,"byte_end":410655,"line_start":982,"line_end":982,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1834},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":411326,"byte_end":411333,"line_start":1003,"line_end":1003,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":413608,"byte_end":413619,"line_start":1070,"line_end":1070,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":3054},"to":{"krate":0,"index":1850}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":414196,"byte_end":414197,"line_start":1092,"line_end":1092,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":729},"to":{"krate":0,"index":1850}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":414812,"byte_end":414820,"line_start":1108,"line_end":1108,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":1874},"to":{"krate":0,"index":1850}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416109,"byte_end":416118,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":3060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,48,46,50,46,49,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":416871,"byte_end":416880,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":3060},"to":{"krate":2,"index":2012}}]}