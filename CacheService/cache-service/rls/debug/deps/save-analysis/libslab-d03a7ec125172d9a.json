{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"slab","disambiguator":[5483611644210792733,2572792210224775440]},"crate_root":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src","external_crates":[{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15457747332785279848,2321850194859987339]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15868474213044323624,2444462643878075336]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8458891086083892067,8748117807113040734]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[767489389527341057,5235531157453730766]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[18110415425518651545,18006836507566872508]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7789913747131704681,15383421434934411168]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13641195905247684855,10390215052031693935]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[6546252056220169788,18379399819183232084]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18001143091758731311,4733760878430807864]}}],"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21835,"line_start":1,"line_end":837,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":21835,"line_start":1,"line_end":837,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":50},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":104},{"krate":0,"index":112},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":140}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":186,"byte_end":190,"line_start":7,"line_end":7,"column_start":12,"column_end":16},"name":"Slab","qualname":"::Slab","value":"Slab {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A preallocated chunk of memory for storing objects of the same type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":549,"byte_end":554,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Entry","qualname":"::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33}],"decl_id":null,"docs":" A handle to an occupied slot in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":679,"byte_end":690,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":43}],"decl_id":null,"docs":" A handle to a vacant slot in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":824,"byte_end":828,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55}],"decl_id":null,"docs":" An iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":989,"byte_end":996,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69}],"decl_id":null,"docs":" A mutable iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1460,"byte_end":1473,"line_start":65,"line_end":65,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Slab<T, I>>::with_capacity","value":"fn (capacity: usize) -> Slab<T, I>","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty `Slab` with the requested capacity\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1818,"byte_end":1821,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"len","qualname":"<Slab<T, I>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of values stored by the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1924,"byte_end":1932,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Slab<T, I>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total capacity of the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2052,"byte_end":2060,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Slab<T, I>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Slab` is storing no values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2188,"byte_end":2197,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"available","qualname":"<Slab<T, I>>::available","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of available slots remaining in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2327,"byte_end":2340,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"has_available","qualname":"<Slab<T, I>>::has_available","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Slab` has available slots\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2530,"byte_end":2538,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"contains","qualname":"<Slab<T, I>>::contains","value":"fn (&self, idx: I) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Slab` contains a value for the given token\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2683,"byte_end":2686,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"get","qualname":"<Slab<T, I>>::get","value":"fn (&self, idx: I) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value associated with the given token\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3043,"byte_end":3050,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Slab<T, I>>::get_mut","value":"fn (&mut self, idx: I) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value associated with the given token\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3341,"byte_end":3347,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"insert","qualname":"<Slab<T, I>>::insert","value":"fn (&mut self, val: T) -> Result<I, T>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into the slab, returning the associated token\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3678,"byte_end":3683,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"entry","qualname":"<Slab<T, I>>::entry","value":"fn (&mut self, idx: I) -> Option<Entry<T, I>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to an entry.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4230,"byte_end":4242,"line_start":162,"line_end":162,"column_start":12,"column_end":24},"name":"vacant_entry","qualname":"<Slab<T, I>>::vacant_entry","value":"fn (&mut self) -> Option<VacantEntry<T, I>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to a vacant entry.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4524,"byte_end":4530,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"remove","qualname":"<Slab<T, I>>::remove","value":"fn (&mut self, idx: I) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Releases the given slot\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4872,"byte_end":4878,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"retain","qualname":"<Slab<T, I>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retain only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5231,"byte_end":5235,"line_start":198,"line_end":198,"column_start":12,"column_end":16},"name":"iter","qualname":"<Slab<T, I>>::iter","value":"fn (&self) -> Iter<T, I>","parent":null,"children":[],"decl_id":null,"docs":" An iterator for visiting all elements stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5448,"byte_end":5456,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Slab<T, I>>::iter_mut","value":"fn (&mut self) -> IterMut<T, I>","parent":null,"children":[],"decl_id":null,"docs":" A mutable iterator for visiting all elements stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5705,"byte_end":5710,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"clear","qualname":"<Slab<T, I>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Empty the slab, by freeing all entries\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6074,"byte_end":6087,"line_start":228,"line_end":228,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<Slab<T, I>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `Slab`. Does nothing if the capacity is\n already sufficient.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8540,"byte_end":8547,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"replace","qualname":"<Entry<'a, T, I>>::replace","value":"fn (&mut self, val: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replace the value stored in the entry\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8862,"byte_end":8874,"line_start":335,"line_end":335,"column_start":12,"column_end":24},"name":"replace_with","qualname":"<Entry<'a, T, I>>::replace_with","value":"fn <F> (&mut self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply the function to the current value, replacing it with the result\n of the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9339,"byte_end":9345,"line_start":350,"line_end":350,"column_start":12,"column_end":18},"name":"remove","qualname":"<Entry<'a, T, I>>::remove","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the value stored in the entry\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9653,"byte_end":9656,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"get","qualname":"<Entry<'a, T, I>>::get","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value stored in the entry\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9871,"byte_end":9878,"line_start":370,"line_end":370,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Entry<'a, T, I>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value stored in the entry\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10096,"byte_end":10104,"line_start":378,"line_end":378,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<Entry<'a, T, I>>::into_mut","value":"fn (self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Convert the entry handle to a mutable reference\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10295,"byte_end":10300,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry<'a, T, I>>::index","value":"fn (&self) -> I","parent":null,"children":[],"decl_id":null,"docs":" Return the entry index\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10506,"byte_end":10512,"line_start":399,"line_end":399,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry<'a, T, I>>::insert","value":"fn (self, val: T) -> Entry<'a, T, I>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into the entry\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10725,"byte_end":10730,"line_start":409,"line_end":409,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry<'a, T, I>>::index","value":"fn (&self) -> I","parent":null,"children":[],"decl_id":null,"docs":" Returns the entry index\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1216,"byte_end":1220,"line_start":54,"line_end":54,"column_start":28,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1376,"byte_end":1380,"line_start":63,"line_end":63,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2434,"byte_end":2438,"line_start":104,"line_end":104,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7358,"byte_end":7362,"line_start":273,"line_end":273,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7547,"byte_end":7551,"line_start":281,"line_end":281,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7697,"byte_end":7701,"line_start":287,"line_end":287,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8464,"byte_end":8469,"line_start":323,"line_end":323,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10433,"byte_end":10444,"line_start":397,"line_end":397,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10842,"byte_end":10846,"line_start":420,"line_end":420,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11497,"byte_end":11504,"line_start":450,"line_end":450,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1216,"byte_end":1220,"line_start":54,"line_end":54,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":1774}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1376,"byte_end":1380,"line_start":63,"line_end":63,"column_start":12,"column_end":16},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2434,"byte_end":2438,"line_start":104,"line_end":104,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7358,"byte_end":7362,"line_start":273,"line_end":273,"column_start":57,"column_end":61},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7547,"byte_end":7551,"line_start":281,"line_end":281,"column_start":60,"column_end":64},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2112}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7697,"byte_end":7701,"line_start":287,"line_end":287,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":20},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8464,"byte_end":8469,"line_start":323,"line_end":323,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10433,"byte_end":10444,"line_start":397,"line_end":397,"column_start":43,"column_end":54},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":24},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10842,"byte_end":10846,"line_start":420,"line_end":420,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":26},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11497,"byte_end":11504,"line_start":450,"line_end":450,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":28},"to":{"krate":2,"index":3842}}]}