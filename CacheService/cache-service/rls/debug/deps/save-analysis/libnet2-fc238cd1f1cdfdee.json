{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"net2","disambiguator":[6384054515934212981,1451365037679047431]},"crate_root":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src","external_crates":[{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15457747332785279848,2321850194859987339]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15868474213044323624,2444462643878075336]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8458891086083892067,8748117807113040734]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[767489389527341057,5235531157453730766]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[18110415425518651545,18006836507566872508]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7789913747131704681,15383421434934411168]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13641195905247684855,10390215052031693935]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[6546252056220169788,18379399819183232084]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18001143091758731311,4733760878430807864]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":10,"id":{"name":"libc","disambiguator":[9795921507606627722,5163658886396158850]}},{"file_name":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","num":11,"id":{"name":"cfg_if","disambiguator":[1118490139373986064,12434004489676140572]}}],"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":3411,"line_start":11,"line_end":121,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2100,"byte_end":2110,"line_start":67,"line_end":67,"column_start":14,"column_end":24},"name":"TcpBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2125,"byte_end":2135,"line_start":68,"line_end":68,"column_start":14,"column_end":24},"name":"UdpBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2151,"byte_end":2163,"line_start":69,"line_end":69,"column_start":15,"column_end":27},"name":"TcpStreamExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2165,"byte_end":2179,"line_start":69,"line_end":69,"column_start":29,"column_end":43},"name":"TcpListenerExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2181,"byte_end":2193,"line_start":69,"line_end":69,"column_start":45,"column_end":57},"name":"UdpSocketExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":3411,"line_start":11,"line_end":121,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":20},{"krate":0,"index":26},{"krate":0,"index":88},{"krate":0,"index":136},{"krate":0,"index":204},{"krate":0,"index":634},{"krate":0,"index":656},{"krate":0,"index":758},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":830},{"krate":0,"index":836}],"decl_id":null,"docs":" Extensions to `std::net` networking types.","sig":null,"attributes":[{"value":"deny(missing_docs, warnings)","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1620,"byte_end":1652,"line_start":42,"line_end":42,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":4221,"byte_end":4231,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"TcpBuilder","qualname":"::tcp::TcpBuilder","value":"TcpBuilder {  }","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" An \"in progress\" TCP socket which has not yet been connected or listened.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":4570,"byte_end":4576,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"new_v4","qualname":"<TcpBuilder>::new_v4","value":"fn () -> io::Result<TcpBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\n type, and with a protocol argument of 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":4970,"byte_end":4976,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"new_v6","qualname":"<TcpBuilder>::new_v6","value":"fn () -> io::Result<TcpBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\n type, and with a protocol argument of 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":5259,"byte_end":5263,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"bind","qualname":"<TcpBuilder>::bind","value":"fn <T> (&self, addr: T) -> io::Result<&TcpBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Binds this socket to the specified address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":5816,"byte_end":5822,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"listen","qualname":"<TcpBuilder>::listen","value":"fn (&self, backlog: i32) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Mark a socket as ready to accept incoming connection requests using\n accept()","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":6325,"byte_end":6332,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"connect","qualname":"<TcpBuilder>::connect","value":"fn <T> (&self, addr: T) -> io::Result<TcpStream>","parent":null,"children":[],"decl_id":null,"docs":" Initiate a connection on this socket to the specified address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":7112,"byte_end":7125,"line_start":102,"line_end":102,"column_start":12,"column_end":25},"name":"to_tcp_stream","qualname":"<TcpBuilder>::to_tcp_stream","value":"fn (&self) -> io::Result<TcpStream>","parent":null,"children":[],"decl_id":null,"docs":" Converts this builder into a `TcpStream`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":7697,"byte_end":7712,"line_start":114,"line_end":114,"column_start":12,"column_end":27},"name":"to_tcp_listener","qualname":"<TcpBuilder>::to_tcp_listener","value":"fn (&self) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Converts this builder into a `TcpListener`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":8173,"byte_end":8183,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpBuilder>::local_addr","value":"fn (&self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of the local half of this TCP socket.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":10091,"byte_end":10101,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"UdpBuilder","qualname":"::udp::UdpBuilder","value":"UdpBuilder {  }","parent":null,"children":[{"krate":0,"index":47}],"decl_id":null,"docs":" An \"in progress\" UDP socket which has not yet been connected.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":10439,"byte_end":10445,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"new_v4","qualname":"<UdpBuilder>::new_v4","value":"fn () -> io::Result<UdpBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\n type, and with a protocol argument of 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":10837,"byte_end":10843,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"new_v6","qualname":"<UdpBuilder>::new_v6","value":"fn () -> io::Result<UdpBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\n type, and with a protocol argument of 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":11125,"byte_end":11129,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"bind","qualname":"<UdpBuilder>::bind","value":"fn <T> (&self, addr: T) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Binds this socket to the specified address.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":20168,"byte_end":20180,"line_start":85,"line_end":85,"column_start":11,"column_end":23},"name":"TcpStreamExt","qualname":"::ext::TcpStreamExt","value":"TcpStreamExt","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306}],"decl_id":null,"docs":" Extension methods for the standard [`TcpStream` type][link] in `std::net`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":20598,"byte_end":20609,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"set_nodelay","qualname":"::ext::TcpStreamExt::set_nodelay","value":"fn (&self, nodelay: bool) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":20855,"byte_end":20862,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"nodelay","qualname":"::ext::TcpStreamExt::nodelay","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":21066,"byte_end":21086,"line_start":105,"line_end":105,"column_start":8,"column_end":28},"name":"set_recv_buffer_size","qualname":"::ext::TcpStreamExt::set_recv_buffer_size","value":"fn (&self, size: usize) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":21346,"byte_end":21362,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"recv_buffer_size","qualname":"::ext::TcpStreamExt::recv_buffer_size","value":"fn (&self) -> io::Result<usize>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":21564,"byte_end":21584,"line_start":117,"line_end":117,"column_start":8,"column_end":28},"name":"set_send_buffer_size","qualname":"::ext::TcpStreamExt::set_send_buffer_size","value":"fn (&self, size: usize) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":21834,"byte_end":21850,"line_start":124,"line_end":124,"column_start":8,"column_end":24},"name":"send_buffer_size","qualname":"::ext::TcpStreamExt::send_buffer_size","value":"fn (&self) -> io::Result<usize>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":22530,"byte_end":22546,"line_start":138,"line_end":138,"column_start":8,"column_end":24},"name":"set_keepalive_ms","qualname":"::ext::TcpStreamExt::set_keepalive_ms","value":"fn (&self, keepalive: Option<u32>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets whether keepalive messages are enabled to be sent on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":22874,"byte_end":22886,"line_start":146,"line_end":146,"column_start":8,"column_end":20},"name":"keepalive_ms","qualname":"::ext::TcpStreamExt::keepalive_ms","value":"fn (&self) -> io::Result<Option<u32>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns whether keepalive messages are enabled on this socket, and if so\n the amount of milliseconds between them.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":23546,"byte_end":23559,"line_start":160,"line_end":160,"column_start":8,"column_end":21},"name":"set_keepalive","qualname":"::ext::TcpStreamExt::set_keepalive","value":"fn (&self, keepalive: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets whether keepalive messages are enabled to be sent on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":23880,"byte_end":23889,"line_start":168,"line_end":168,"column_start":8,"column_end":17},"name":"keepalive","qualname":"::ext::TcpStreamExt::keepalive","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns whether keepalive messages are enabled on this socket, and if so\n the duration of time between them.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":24314,"byte_end":24333,"line_start":176,"line_end":176,"column_start":8,"column_end":27},"name":"set_read_timeout_ms","qualname":"::ext::TcpStreamExt::set_read_timeout_ms","value":"fn (&self, val: Option<u32>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":24739,"byte_end":24755,"line_start":184,"line_end":184,"column_start":8,"column_end":24},"name":"set_read_timeout","qualname":"::ext::TcpStreamExt::set_read_timeout","value":"fn (&self, val: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":25026,"byte_end":25041,"line_start":191,"line_end":191,"column_start":8,"column_end":23},"name":"read_timeout_ms","qualname":"::ext::TcpStreamExt::read_timeout_ms","value":"fn (&self) -> io::Result<Option<u32>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":25292,"byte_end":25304,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"read_timeout","qualname":"::ext::TcpStreamExt::read_timeout","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":25730,"byte_end":25750,"line_start":206,"line_end":206,"column_start":8,"column_end":28},"name":"set_write_timeout_ms","qualname":"::ext::TcpStreamExt::set_write_timeout_ms","value":"fn (&self, val: Option<u32>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":26147,"byte_end":26164,"line_start":214,"line_end":214,"column_start":8,"column_end":25},"name":"set_write_timeout","qualname":"::ext::TcpStreamExt::set_write_timeout","value":"fn (&self, val: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":26437,"byte_end":26453,"line_start":221,"line_end":221,"column_start":8,"column_end":24},"name":"write_timeout_ms","qualname":"::ext::TcpStreamExt::write_timeout_ms","value":"fn (&self) -> io::Result<Option<u32>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":26706,"byte_end":26719,"line_start":228,"line_end":228,"column_start":8,"column_end":21},"name":"write_timeout","qualname":"::ext::TcpStreamExt::write_timeout","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":26946,"byte_end":26953,"line_start":234,"line_end":234,"column_start":8,"column_end":15},"name":"set_ttl","qualname":"::ext::TcpStreamExt::set_ttl","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":27182,"byte_end":27185,"line_start":241,"line_end":241,"column_start":8,"column_end":11},"name":"ttl","qualname":"::ext::TcpStreamExt::ttl","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":27645,"byte_end":27656,"line_start":251,"line_end":251,"column_start":8,"column_end":19},"name":"set_only_v6","qualname":"::ext::TcpStreamExt::set_only_v6","value":"fn (&self, only_v6: bool) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":27903,"byte_end":27910,"line_start":258,"line_end":258,"column_start":8,"column_end":15},"name":"only_v6","qualname":"::ext::TcpStreamExt::only_v6","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":28442,"byte_end":28449,"line_start":269,"line_end":269,"column_start":8,"column_end":15},"name":"connect","qualname":"::ext::TcpStreamExt::connect","value":"fn <T> (&self, addr: T) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Executes a `connect` operation on this socket, establishing a connection\n to the host specified by `addr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":28757,"byte_end":28767,"line_start":276,"line_end":276,"column_start":8,"column_end":18},"name":"take_error","qualname":"::ext::TcpStreamExt::take_error","value":"fn (&self) -> io::Result<Option<io::Error>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Get the value of the `SO_ERROR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":29003,"byte_end":29018,"line_start":282,"line_end":282,"column_start":8,"column_end":23},"name":"set_nonblocking","qualname":"::ext::TcpStreamExt::set_nonblocking","value":"fn (&self, nonblocking: bool) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Moves this TCP stream into or out of nonblocking mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":29152,"byte_end":29162,"line_start":285,"line_end":285,"column_start":8,"column_end":18},"name":"set_linger","qualname":"::ext::TcpStreamExt::set_linger","value":"fn (&self, dur: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets the linger duration of this socket by setting the SO_LINGER option\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":29302,"byte_end":29308,"line_start":288,"line_end":288,"column_start":8,"column_end":14},"name":"linger","qualname":"::ext::TcpStreamExt::linger","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" reads the linger duration for this socket by getting the SO_LINGER option\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":29517,"byte_end":29531,"line_start":294,"line_end":294,"column_start":11,"column_end":25},"name":"TcpListenerExt","qualname":"::ext::TcpListenerExt","value":"TcpListenerExt","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324}],"decl_id":null,"docs":" Extension methods for the standard [`TcpListener` type][link] in `std::net`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":29740,"byte_end":29747,"line_start":300,"line_end":300,"column_start":8,"column_end":15},"name":"set_ttl","qualname":"::ext::TcpListenerExt::set_ttl","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":30021,"byte_end":30024,"line_start":308,"line_end":308,"column_start":8,"column_end":11},"name":"ttl","qualname":"::ext::TcpListenerExt::ttl","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":30302,"byte_end":30313,"line_start":316,"line_end":316,"column_start":8,"column_end":19},"name":"set_only_v6","qualname":"::ext::TcpListenerExt::set_only_v6","value":"fn (&self, only_v6: bool) -> io::Result<()>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":30605,"byte_end":30612,"line_start":324,"line_end":324,"column_start":8,"column_end":15},"name":"only_v6","qualname":"::ext::TcpListenerExt::only_v6","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":30895,"byte_end":30905,"line_start":331,"line_end":331,"column_start":8,"column_end":18},"name":"take_error","qualname":"::ext::TcpListenerExt::take_error","value":"fn (&self) -> io::Result<Option<io::Error>>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Get the value of the `SO_ERROR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":31202,"byte_end":31217,"line_start":339,"line_end":339,"column_start":8,"column_end":23},"name":"set_nonblocking","qualname":"::ext::TcpListenerExt::set_nonblocking","value":"fn (&self, nonblocking: bool) -> io::Result<()>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Moves this TCP listener into or out of nonblocking mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":31351,"byte_end":31361,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"set_linger","qualname":"::ext::TcpListenerExt::set_linger","value":"fn (&self, dur: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Sets the linger duration of this socket by setting the SO_LINGER option\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":31501,"byte_end":31507,"line_start":345,"line_end":345,"column_start":8,"column_end":14},"name":"linger","qualname":"::ext::TcpListenerExt::linger","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" reads the linger duration for this socket by getting the SO_LINGER option\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":31712,"byte_end":31724,"line_start":351,"line_end":351,"column_start":11,"column_end":23},"name":"UdpSocketExt","qualname":"::ext::UdpSocketExt","value":"UdpSocketExt","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408}],"decl_id":null,"docs":" Extension methods for the standard [`UdpSocket` type][link] in `std::net`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":31901,"byte_end":31921,"line_start":355,"line_end":355,"column_start":8,"column_end":28},"name":"set_recv_buffer_size","qualname":"::ext::UdpSocketExt::set_recv_buffer_size","value":"fn (&self, size: usize) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":32181,"byte_end":32197,"line_start":362,"line_end":362,"column_start":8,"column_end":24},"name":"recv_buffer_size","qualname":"::ext::UdpSocketExt::recv_buffer_size","value":"fn (&self) -> io::Result<usize>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":32399,"byte_end":32419,"line_start":367,"line_end":367,"column_start":8,"column_end":28},"name":"set_send_buffer_size","qualname":"::ext::UdpSocketExt::set_send_buffer_size","value":"fn (&self, size: usize) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":32669,"byte_end":32685,"line_start":374,"line_end":374,"column_start":8,"column_end":24},"name":"send_buffer_size","qualname":"::ext::UdpSocketExt::send_buffer_size","value":"fn (&self) -> io::Result<usize>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":32893,"byte_end":32906,"line_start":380,"line_end":380,"column_start":8,"column_end":21},"name":"set_broadcast","qualname":"::ext::UdpSocketExt::set_broadcast","value":"fn (&self, broadcast: bool) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":33168,"byte_end":33177,"line_start":388,"line_end":388,"column_start":8,"column_end":17},"name":"broadcast","qualname":"::ext::UdpSocketExt::broadcast","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":33439,"byte_end":33460,"line_start":394,"line_end":394,"column_start":8,"column_end":29},"name":"set_multicast_loop_v4","qualname":"::ext::UdpSocketExt::set_multicast_loop_v4","value":"fn (&self, multicast_loop_v4: bool) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":33751,"byte_end":33768,"line_start":402,"line_end":402,"column_start":8,"column_end":25},"name":"multicast_loop_v4","qualname":"::ext::UdpSocketExt::multicast_loop_v4","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":34179,"byte_end":34199,"line_start":411,"line_end":411,"column_start":8,"column_end":28},"name":"set_multicast_ttl_v4","qualname":"::ext::UdpSocketExt::set_multicast_ttl_v4","value":"fn (&self, multicast_ttl_v4: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":34485,"byte_end":34501,"line_start":419,"line_end":419,"column_start":8,"column_end":24},"name":"multicast_ttl_v4","qualname":"::ext::UdpSocketExt::multicast_ttl_v4","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":34612,"byte_end":34633,"line_start":422,"line_end":422,"column_start":8,"column_end":29},"name":"set_multicast_hops_v6","qualname":"::ext::UdpSocketExt::set_multicast_hops_v6","value":"fn (&self, hops: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":34754,"byte_end":34771,"line_start":425,"line_end":425,"column_start":8,"column_end":25},"name":"multicast_hops_v6","qualname":"::ext::UdpSocketExt::multicast_hops_v6","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":35036,"byte_end":35057,"line_start":431,"line_end":431,"column_start":8,"column_end":29},"name":"set_multicast_loop_v6","qualname":"::ext::UdpSocketExt::set_multicast_loop_v6","value":"fn (&self, multicast_loop_v6: bool) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":35350,"byte_end":35367,"line_start":439,"line_end":439,"column_start":8,"column_end":25},"name":"multicast_loop_v6","qualname":"::ext::UdpSocketExt::multicast_loop_v6","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":35554,"byte_end":35573,"line_start":444,"line_end":444,"column_start":8,"column_end":27},"name":"set_multicast_if_v4","qualname":"::ext::UdpSocketExt::set_multicast_if_v4","value":"fn (&self, interface: &Ipv4Addr) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_IF` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":35778,"byte_end":35793,"line_start":449,"line_end":449,"column_start":8,"column_end":23},"name":"multicast_if_v4","qualname":"::ext::UdpSocketExt::multicast_if_v4","value":"fn (&self) -> io::Result<Ipv4Addr>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_IF` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":35987,"byte_end":36006,"line_start":455,"line_end":455,"column_start":8,"column_end":27},"name":"set_multicast_if_v6","qualname":"::ext::UdpSocketExt::set_multicast_if_v6","value":"fn (&self, interface: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_IF` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":36207,"byte_end":36222,"line_start":460,"line_end":460,"column_start":8,"column_end":23},"name":"multicast_if_v6","qualname":"::ext::UdpSocketExt::multicast_if_v6","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_IF` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":36457,"byte_end":36464,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"set_ttl","qualname":"::ext::UdpSocketExt::set_ttl","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":36738,"byte_end":36741,"line_start":475,"line_end":475,"column_start":8,"column_end":11},"name":"ttl","qualname":"::ext::UdpSocketExt::ttl","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":36916,"byte_end":36935,"line_start":480,"line_end":480,"column_start":8,"column_end":27},"name":"set_unicast_hops_v6","qualname":"::ext::UdpSocketExt::set_unicast_hops_v6","value":"fn (&self, ttl: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":37119,"byte_end":37134,"line_start":485,"line_end":485,"column_start":8,"column_end":23},"name":"unicast_hops_v6","qualname":"::ext::UdpSocketExt::unicast_hops_v6","value":"fn (&self) -> io::Result<u32>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":37412,"byte_end":37423,"line_start":493,"line_end":493,"column_start":8,"column_end":19},"name":"set_only_v6","qualname":"::ext::UdpSocketExt::set_only_v6","value":"fn (&self, only_v6: bool) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":37715,"byte_end":37722,"line_start":501,"line_end":501,"column_start":8,"column_end":15},"name":"only_v6","qualname":"::ext::UdpSocketExt::only_v6","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":38182,"byte_end":38199,"line_start":510,"line_end":510,"column_start":8,"column_end":25},"name":"join_multicast_v4","qualname":"::ext::UdpSocketExt::join_multicast_v4","value":"fn (&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_ADD_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":38612,"byte_end":38629,"line_start":518,"line_end":518,"column_start":8,"column_end":25},"name":"join_multicast_v6","qualname":"::ext::UdpSocketExt::join_multicast_v6","value":"fn (&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":38940,"byte_end":38958,"line_start":527,"line_end":527,"column_start":8,"column_end":26},"name":"leave_multicast_v4","qualname":"::ext::UdpSocketExt::leave_multicast_v4","value":"fn (&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_DROP_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":39278,"byte_end":39296,"line_start":536,"line_end":536,"column_start":8,"column_end":26},"name":"leave_multicast_v6","qualname":"::ext::UdpSocketExt::leave_multicast_v6","value":"fn (&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":39771,"byte_end":39790,"line_start":545,"line_end":545,"column_start":8,"column_end":27},"name":"set_read_timeout_ms","qualname":"::ext::UdpSocketExt::set_read_timeout_ms","value":"fn (&self, val: Option<u32>) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":40196,"byte_end":40212,"line_start":553,"line_end":553,"column_start":8,"column_end":24},"name":"set_read_timeout","qualname":"::ext::UdpSocketExt::set_read_timeout","value":"fn (&self, val: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":40483,"byte_end":40498,"line_start":560,"line_end":560,"column_start":8,"column_end":23},"name":"read_timeout_ms","qualname":"::ext::UdpSocketExt::read_timeout_ms","value":"fn (&self) -> io::Result<Option<u32>>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":40749,"byte_end":40761,"line_start":567,"line_end":567,"column_start":8,"column_end":20},"name":"read_timeout","qualname":"::ext::UdpSocketExt::read_timeout","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":41187,"byte_end":41207,"line_start":575,"line_end":575,"column_start":8,"column_end":28},"name":"set_write_timeout_ms","qualname":"::ext::UdpSocketExt::set_write_timeout_ms","value":"fn (&self, val: Option<u32>) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":41604,"byte_end":41621,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"set_write_timeout","qualname":"::ext::UdpSocketExt::set_write_timeout","value":"fn (&self, val: Option<Duration>) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sets the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":41894,"byte_end":41910,"line_start":590,"line_end":590,"column_start":8,"column_end":24},"name":"write_timeout_ms","qualname":"::ext::UdpSocketExt::write_timeout_ms","value":"fn (&self) -> io::Result<Option<u32>>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":42163,"byte_end":42176,"line_start":597,"line_end":597,"column_start":8,"column_end":21},"name":"write_timeout","qualname":"::ext::UdpSocketExt::write_timeout","value":"fn (&self) -> io::Result<Option<Duration>>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDTIMEO` option for this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":42471,"byte_end":42481,"line_start":604,"line_end":604,"column_start":8,"column_end":18},"name":"take_error","qualname":"::ext::UdpSocketExt::take_error","value":"fn (&self) -> io::Result<Option<io::Error>>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Get the value of the `SO_ERROR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":42739,"byte_end":42746,"line_start":609,"line_end":609,"column_start":8,"column_end":15},"name":"connect","qualname":"::ext::UdpSocketExt::connect","value":"fn <A> (&self, addr: A) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Connects this UDP socket to a remote address, allowing the `send` and\n `recv` syscalls to be used to send data and also applies filters to only\n receive data from the specified address.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":43034,"byte_end":43038,"line_start":615,"line_end":615,"column_start":8,"column_end":12},"name":"send","qualname":"::ext::UdpSocketExt::send","value":"fn (&self, buf: &[u8]) -> io::Result<usize>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Sends data on the socket to the remote address to which it is connected.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":43327,"byte_end":43331,"line_start":622,"line_end":622,"column_start":8,"column_end":12},"name":"recv","qualname":"::ext::UdpSocketExt::recv","value":"fn (&self, buf: &mut [u8]) -> io::Result<usize>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Receives data on the socket from the remote address to which it is\n connected.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":43630,"byte_end":43645,"line_start":630,"line_end":630,"column_start":8,"column_end":23},"name":"set_nonblocking","qualname":"::ext::UdpSocketExt::set_nonblocking","value":"fn (&self, nonblocking: bool) -> io::Result<()>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Moves this UDP socket into or out of nonblocking mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":64569,"byte_end":64572,"line_start":1307,"line_end":1307,"column_start":12,"column_end":15},"name":"ttl","qualname":"<TcpBuilder>::ttl","value":"fn (&self, ttl: u32) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":64937,"byte_end":64944,"line_start":1317,"line_end":1317,"column_start":12,"column_end":19},"name":"only_v6","qualname":"<TcpBuilder>::only_v6","value":"fn (&self, only_v6: bool) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":65401,"byte_end":65414,"line_start":1327,"line_end":1327,"column_start":12,"column_end":25},"name":"reuse_address","qualname":"<TcpBuilder>::reuse_address","value":"fn (&self, reuse: bool) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Set value for the `SO_REUSEADDR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":65636,"byte_end":65653,"line_start":1333,"line_end":1333,"column_start":12,"column_end":29},"name":"get_reuse_address","qualname":"<TcpBuilder>::get_reuse_address","value":"fn (&self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Check the `SO_REUSEADDR` option on this socket.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":66019,"byte_end":66029,"line_start":1342,"line_end":1342,"column_start":12,"column_end":22},"name":"take_error","qualname":"<TcpBuilder>::take_error","value":"fn (&self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of the `SO_ERROR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":66750,"byte_end":66753,"line_start":1363,"line_end":1363,"column_start":12,"column_end":15},"name":"ttl","qualname":"<UdpBuilder>::ttl","value":"fn (&self, ttl: u32) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":67104,"byte_end":67111,"line_start":1373,"line_end":1373,"column_start":12,"column_end":19},"name":"only_v6","qualname":"<UdpBuilder>::only_v6","value":"fn (&self, only_v6: bool) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":67490,"byte_end":67503,"line_start":1383,"line_end":1383,"column_start":12,"column_end":25},"name":"reuse_address","qualname":"<UdpBuilder>::reuse_address","value":"fn (&self, reuse: bool) -> io::Result<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Set value for the `SO_REUSEADDR` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":67725,"byte_end":67742,"line_start":1389,"line_end":1389,"column_start":12,"column_end":29},"name":"get_reuse_address","qualname":"<UdpBuilder>::get_reuse_address","value":"fn (&self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Check the `SO_REUSEADDR` option on this socket.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":68108,"byte_end":68118,"line_start":1398,"line_end":1398,"column_start":12,"column_end":22},"name":"take_error","qualname":"<UdpBuilder>::take_error","value":"fn (&self) -> io::Result<Option<io::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of the `SO_ERROR` option on this socket.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unix","qualname":"::unix","value":"/home/bryan/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/unix.rs","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":768},{"krate":0,"index":774},{"krate":0,"index":780},{"krate":0,"index":786},{"krate":0,"index":792},{"krate":0,"index":798}],"decl_id":null,"docs":" Unix-specific extensions to the `std::net` types.\n","sig":null,"attributes":[{"value":"cfg(all(unix, not(any(target_os = \"solaris\"))))","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2021,"byte_end":2071,"line_start":65,"line_end":65,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":74144,"byte_end":74161,"line_start":10,"line_end":10,"column_start":11,"column_end":28},"name":"UnixTcpBuilderExt","qualname":"::unix::UnixTcpBuilderExt","value":"UnixTcpBuilderExt","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":784}],"decl_id":null,"docs":" Unix-specific extensions for the `TcpBuilder` type in this library.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":74456,"byte_end":74466,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"reuse_port","qualname":"::unix::UnixTcpBuilderExt::reuse_port","value":"fn (&self, reuse: bool) -> io::Result<&Self>","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Set value for the `SO_REUSEPORT` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":74586,"byte_end":74600,"line_start":19,"line_end":19,"column_start":8,"column_end":22},"name":"get_reuse_port","qualname":"::unix::UnixTcpBuilderExt::get_reuse_port","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Check the value of the `SO_REUSEPORT` option on this socket.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":75103,"byte_end":75120,"line_start":35,"line_end":35,"column_start":11,"column_end":28},"name":"UnixUdpBuilderExt","qualname":"::unix::UnixUdpBuilderExt","value":"UnixUdpBuilderExt","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":796}],"decl_id":null,"docs":" Unix-specific extensions for the `UdpBuilder` type in this library.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":75415,"byte_end":75425,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"reuse_port","qualname":"::unix::UnixUdpBuilderExt::reuse_port","value":"fn (&self, reuse: bool) -> io::Result<&Self>","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" Set value for the `SO_REUSEPORT` option on this socket.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":75545,"byte_end":75559,"line_start":44,"line_end":44,"column_start":8,"column_end":22},"name":"get_reuse_port","qualname":"::unix::UnixUdpBuilderExt::get_reuse_port","value":"fn (&self) -> io::Result<bool>","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" Check the value of the `SO_REUSEPORT` option on this socket.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":826},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3202,"byte_end":3207,"line_start":109,"line_end":109,"column_start":10,"column_end":15},"name":"Inner","qualname":"::AsInner::Inner","value":"type Inner;","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3279,"byte_end":3284,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"name":"Inner","qualname":"::FromInner::Inner","value":"type Inner;","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3363,"byte_end":3368,"line_start":119,"line_end":119,"column_start":10,"column_end":15},"name":"Inner","qualname":"::IntoInner::Inner","value":"type Inner;","parent":{"krate":0,"index":836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":4279,"byte_end":4289,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":8828,"byte_end":8838,"line_start":144,"line_end":144,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":9034,"byte_end":9044,"line_start":151,"line_end":151,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":9181,"byte_end":9191,"line_start":156,"line_end":156,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":10149,"byte_end":10159,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":11795,"byte_end":11805,"line_start":71,"line_end":71,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":12001,"byte_end":12011,"line_start":78,"line_end":78,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":12148,"byte_end":12158,"line_start":83,"line_end":83,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":13032,"byte_end":13038,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14505,"byte_end":14511,"line_start":69,"line_end":69,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14633,"byte_end":14639,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14751,"byte_end":14757,"line_start":80,"line_end":80,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14900,"byte_end":14906,"line_start":87,"line_end":87,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":43805,"byte_end":43806,"line_start":639,"line_end":639,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":44375,"byte_end":44384,"line_start":659,"line_end":659,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":52492,"byte_end":52501,"line_start":935,"line_end":935,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":63244,"byte_end":63255,"line_start":1266,"line_end":1266,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":64346,"byte_end":64356,"line_start":1301,"line_end":1301,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":66527,"byte_end":66537,"line_start":1357,"line_end":1357,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73161,"byte_end":73171,"line_start":18,"line_end":18,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73358,"byte_end":73368,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73545,"byte_end":73555,"line_start":32,"line_end":32,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73742,"byte_end":73752,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":70455,"byte_end":70461,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":72297,"byte_end":72303,"line_start":91,"line_end":91,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":72420,"byte_end":72426,"line_start":98,"line_end":98,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":74659,"byte_end":74669,"line_start":22,"line_end":22,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":75618,"byte_end":75628,"line_start":47,"line_end":47,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2080,"byte_end":2084,"line_start":65,"line_end":65,"column_start":60,"column_end":64},"ref_id":{"krate":0,"index":758}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":4279,"byte_end":4289,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":8828,"byte_end":8838,"line_start":144,"line_end":144,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":9034,"byte_end":9044,"line_start":151,"line_end":151,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":50},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,116,99,112,46,114,115],"byte_start":9181,"byte_end":9191,"line_start":156,"line_end":156,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":50},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":10149,"byte_end":10159,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":11795,"byte_end":11805,"line_start":71,"line_end":71,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":108},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":12001,"byte_end":12011,"line_start":78,"line_end":78,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":108},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,100,112,46,114,115],"byte_start":12148,"byte_end":12158,"line_start":83,"line_end":83,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":108},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":13032,"byte_end":13038,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14505,"byte_end":14511,"line_start":69,"line_end":69,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":162},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14633,"byte_end":14639,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":162},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14751,"byte_end":14757,"line_start":80,"line_end":80,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":162},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,111,99,107,101,116,46,114,115],"byte_start":14900,"byte_end":14906,"line_start":87,"line_end":87,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":162},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":43805,"byte_end":43806,"line_start":639,"line_end":639,"column_start":29,"column_end":30},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":69},"to":{"krate":0,"index":410}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":44375,"byte_end":44384,"line_start":659,"line_end":659,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":1,"index":4954},"to":{"krate":0,"index":252}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":52492,"byte_end":52501,"line_start":935,"line_end":935,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":1,"index":5114},"to":{"krate":0,"index":326}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":63244,"byte_end":63255,"line_start":1266,"line_end":1266,"column_start":25,"column_end":36},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":1,"index":4956},"to":{"krate":0,"index":308}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":64346,"byte_end":64356,"line_start":1301,"line_end":1301,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,101,120,116,46,114,115],"byte_start":66527,"byte_end":66537,"line_start":1357,"line_end":1357,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73161,"byte_end":73171,"line_start":18,"line_end":18,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":11504}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73358,"byte_end":73368,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":11500}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73545,"byte_end":73555,"line_start":32,"line_end":32,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":108},"to":{"krate":1,"index":11504}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,105,109,112,108,115,46,114,115],"byte_start":73742,"byte_end":73752,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":108},"to":{"krate":1,"index":11500}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":70455,"byte_end":70461,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":72297,"byte_end":72303,"line_start":91,"line_end":91,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":732},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,115,121,115,47,117,110,105,120,47,109,111,100,46,114,115],"byte_start":72420,"byte_end":72426,"line_start":98,"line_end":98,"column_start":15,"column_end":21},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":732},"to":{"krate":2,"index":2040}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":74659,"byte_end":74669,"line_start":22,"line_end":22,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":50},"to":{"krate":0,"index":780}},{"span":{"file_name":[47,104,111,109,101,47,98,114,121,97,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,101,116,50,45,48,46,50,46,51,50,47,115,114,99,47,117,110,105,120,46,114,115],"byte_start":75618,"byte_end":75628,"line_start":47,"line_end":47,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":108},"to":{"krate":0,"index":792}}]}